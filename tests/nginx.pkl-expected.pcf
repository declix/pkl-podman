examples {
  ["nginx container quadlet"] {
    new {
      unit {
        after = "network-online.target"
        allowIsolate = null
        before = null
        bindsTo = null
        collectMode = null
        conflicts = null
        defaultDependencies = null
        description = "Nginx Web Server Container"
        documentation = null
        failureAction = null
        failureActionExitStatus = null
        ignoreOnIsolate = null
        jobRunningTimeoutSec = null
        jobTimeoutAction = null
        jobTimeoutRebootArgument = null
        jobTimeoutSec = null
        joinsNamespaceOf = null
        onFailure = null
        onFailureJobMode = null
        onSuccess = null
        onSuccessJobMode = null
        partOf = null
        propagatesReloadTo = null
        propagatesStopTo = null
        rebootArgument = null
        refuseManualStart = null
        refuseManualStop = null
        reloadPropagatedFrom = null
        requires = null
        requiresMountsFor = null
        requisite = null
        sourcePath = null
        startLimitAction = null
        startLimitBurst = null
        startLimitIntervalSec = null
        stopPropagatedFrom = null
        stopWhenUnneeded = null
        successAction = null
        successActionExitStatus = null
        surviveFinalKillSignal = null
        upholds = null
        wants = null
        wantsMountsFor = null
      }
      install {
        alias = null
        also = null
        defaultInstance = null
        requiredBy = null
        upheldBy = null
        wantedBy = "multi-user.target"
      }
      container {
        image = "docker.io/library/nginx:latest"
        containerName = "nginx"
        environment {
          ["NGINX_HOST"] = "example.com"
          ["NGINX_PORT"] = "80"
        }
        environmentFile = null
        publishPort {
          "80:80"
          "443:443"
        }
        volume {
          "/etc/nginx/conf.d:/etc/nginx/conf.d:ro"
          "/var/www/html:/usr/share/nginx/html:ro"
        }
        network = null
        pull = "missing"
        user = null
        workingDir = null
        label {}
        annotation {}
        exec = null
        entrypoint = null
        cpus = null
        memory = null
        securityLabelDisable = null
        readOnly = null
        noNewPrivileges = null
        podmanArgs = null
        healthCmd = "curl -f http://localhost/ || exit 1"
        healthInterval = "30s"
        healthTimeout = "3s"
        healthRetries = 3
        healthStartPeriod = null
        logDriver = null
        timezone = null
        secret {}
        device {}
        dns {}
        dnsOption {}
        dnsSearch {}
        hostname = null
        addHost {}
        addCapability {}
        dropCapability {}
        ulimit {}
        tmpfs {}
        sysctl {}
        groupAdd {}
        userNS = null
        pidNS = null
        networkAlias {}
      }
      service {
        type = null
        remainAfterExit = null
        restart = "always"
        restartSec = 5
        timeoutStartSec = null
        timeoutStopSec = null
        cpuWeight = null
        cpuQuota = null
        memoryMax = null
        memoryHigh = null
        requires = null
        wants = null
      }
    }
  }
}
